!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC = gcc $(IFLAGS) $(CFLAGS)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -g3$/;"	m
Color	include/particle.h	/^} Color;$/;"	t	typeref:struct:Colour
Colour	include/particle.h	/^typedef struct Colour{$/;"	s
GFLAGS	Makefile	/^GFLAGS = -lglut -lGLU -lGL$/;"	m
IFLAGS	Makefile	/^IFLAGS = -I$/;"	m
KDTreeNode	source/test.c	/^typedef struct KDTreeNode {$/;"	s	file:
KDTreeNode	source/test.c	/^} KDTreeNode;$/;"	t	typeref:struct:KDTreeNode	file:
KD_CollisionSystem	include/kd_collisionSystem.h	/^}KD_CollisionSystem;$/;"	t	typeref:struct:kd_CollisionSystem
KD_TREE_H_	include/KD_Helping_func.h	2;"	d
KD_TREE_H_	include/KD_Tree.h	2;"	d
MFLAGS	Makefile	/^MFLAGS = -lm$/;"	m
OBJECT	Makefile	/^OBJECT = $(subst .c,.o,$(SOURCE))$/;"	m
PARTICLE_H_	include/particle.h	2;"	d
PQ_COL_SYS	include/kd_collisionSystem.h	2;"	d
PQ_PARTICLE	source/main.c	9;"	d	file:
Particle	include/particle.h	/^typedef struct Particle{$/;"	s
Particle	include/particle.h	/^} Particle;$/;"	t	typeref:struct:Particle
Point	source/test.c	/^typedef struct Point {$/;"	s	file:
Point	source/test.c	/^} Point;$/;"	t	typeref:struct:Point	file:
Pre_order	source/KD_Tree.c	/^void Pre_order(kdtree root) {$/;"	f
RANDOM_PARTICLE_GEN_	include/randomParticleGenerator.h	2;"	d
SIM	Makefile	/^SIM  = sim$/;"	m
SOURCE	Makefile	/^SOURCE = $(wildcard *.c)$/;"	m
b	include/particle.h	/^	float r,g,b;$/;"	m	struct:Colour
ball	include/KD_Helping_func.h	/^	Particle ball;$/;"	m	struct:kdnode
bounceOff	source/particle.c	/^void bounceOff(Particle* this, Particle* that){$/;"	f
bounceOffHorizontalWall	source/particle.c	/^void bounceOffHorizontalWall(Particle* this){$/;"	f
bounceOffVerticalWall	source/particle.c	/^void bounceOffVerticalWall(Particle* this){$/;"	f
checkOverlap	source/randomParticleGenerator.c	/^int checkOverlap(Particle* particles, int numParticles, int currentIndex, int arrayPos) {$/;"	f
collisionCheck	source/KD_Tree.c	/^int collisionCheck(Particle p1,Particle p2){$/;"	f
collisions	include/particle.h	/^	int collisions;$/;"	m	struct:Particle
color	include/particle.h	/^	Color color;$/;"	m	struct:Particle
comparePoints	source/KD_Helping_func.c	/^int comparePoints(Particle p1, Particle p2, int level) {$/;"	f
createKDTree	source/KD_Tree.c	/^kdtree createKDTree(Particle points[],int start , int end , int level) {$/;"	f
createNode	source/KD_Helping_func.c	/^kdtree createNode(Particle point){$/;"	f
createNode	source/test.c	/^KDTreeNode* createNode(Point point) {$/;"	f
createRandomSystem	source/randomParticleGenerator.c	/^void createRandomSystem(particleSystem** system, int particleCount){$/;"	f
destroyKDTree	source/KD_Tree.c	/^void destroyKDTree(kdtree root) {$/;"	f
displayKDTree	source/KD_Tree.c	/^void displayKDTree(kdtree root) {$/;"	f
distance	source/KD_Helping_func.c	/^double distance(Particle p1,Particle p2){$/;"	f
distance	source/randomParticleGenerator.c	/^double distance(double x1, double y1, double x2, double y2) {$/;"	f
divideAndAssignParticles	source/randomParticleGenerator.c	/^void divideAndAssignParticles(int particleCount, double left, double right, double bottom, double top, Particle* particles, int arrayPos){$/;"	f
drawCircle	source/main.c	/^void drawCircle(float r, float x, float y){$/;"	f
drawScene	source/main.c	/^void drawScene() {$/;"	f
g	include/particle.h	/^	float r,g,b;$/;"	m	struct:Colour
getRandomDouble	source/randomParticleGenerator.c	/^double getRandomDouble(double min, double max) {$/;"	f
height	source/main.c	/^int width = 1000, height = 1000;$/;"	v
insertNode	source/KD_Tree.c	/^kdtree insertNode(kdtree root, Particle point, int level) {$/;"	f
insertNode	source/test.c	/^KDTreeNode* insertNode(KDTreeNode* root, Point point, int level) {$/;"	f
kd_CollisionSystem	include/kd_collisionSystem.h	/^typedef struct kd_CollisionSystem{$/;"	s
kdnode	include/KD_Helping_func.h	/^typedef struct kdnode{$/;"	s
kdnode	include/KD_Helping_func.h	/^}kdnode;$/;"	t	typeref:struct:kdnode
kdnode	include/KD_Tree.h	/^typedef struct kdnode{$/;"	s
kdnode	include/KD_Tree.h	/^}kdnode;$/;"	t	typeref:struct:kdnode
kdtree	include/KD_Helping_func.h	/^typedef kdnode* kdtree;$/;"	t
kdtree	include/KD_Tree.h	/^typedef kdnode* kdtree;$/;"	t
kdtree	include/kd_collisionSystem.h	/^	kdtree kdtree;$/;"	m	struct:kd_CollisionSystem
keyboardFunc	source/main.c	/^void keyboardFunc(unsigned char key, int x, int y) {$/;"	f
left	include/KD_Helping_func.h	/^  	struct kdnode *left , *right;$/;"	m	struct:kdnode	typeref:struct:kdnode::kdnode
left	include/KD_Tree.h	/^  	struct kdnode *left , *right;$/;"	m	struct:kdnode	typeref:struct:kdnode::kdnode
left	source/test.c	/^    struct KDTreeNode* left;$/;"	m	struct:KDTreeNode	typeref:struct:KDTreeNode::KDTreeNode	file:
main	source/KD_Tree.c	/^int main(){$/;"	f
main	source/main.c	/^int main(int argc, char** argv) {	$/;"	f
main	source/test.c	/^int main() {$/;"	f
mass	include/particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle
move	source/particle.c	/^void move(Particle* p, double dt){$/;"	f
numPoints	source/test.c	/^    int numPoints;$/;"	m	struct:KDTreeNode	file:
particleArray	include/randomParticleGenerator.h	/^	Particle* particleArray;$/;"	m	struct:particleSystem
particleCount	include/randomParticleGenerator.h	/^	int particleCount;$/;"	m	struct:particleSystem
particleSystem	include/randomParticleGenerator.h	/^typedef struct particleSystem{$/;"	s
particleSystem	include/randomParticleGenerator.h	/^}particleSystem;$/;"	t	typeref:struct:particleSystem
particles	include/KD_Tree.h	/^	Particle *particles;$/;"	m	struct:kdnode
partition_xy	source/KD_Helping_func.c	/^int partition_xy(Particle array[], int low, int high , int*flag) {$/;"	f
points	source/test.c	/^    Point points[5];$/;"	m	struct:KDTreeNode	file:
pq_sys	source/main.c	/^pq_CollisionSystem pq_sys;$/;"	v
printArray	source/KD_Tree.c	/^void printArray(Particle array[], int size) {$/;"	f
printKDTree	source/test.c	/^void printKDTree(KDTreeNode* root) {$/;"	f
quickSort_xy	source/KD_Helping_func.c	/^void quickSort_xy(Particle array[], int low, int high, int*flag) {$/;"	f
r	include/particle.h	/^	float r,g,b;$/;"	m	struct:Colour
radius	include/particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle
right	include/KD_Helping_func.h	/^  	struct kdnode *left , *right;$/;"	m	struct:kdnode	typeref:struct:kdnode::
right	include/KD_Tree.h	/^  	struct kdnode *left , *right;$/;"	m	struct:kdnode	typeref:struct:kdnode::
right	source/test.c	/^    struct KDTreeNode* right;$/;"	m	struct:KDTreeNode	typeref:struct:KDTreeNode::KDTreeNode	file:
searchCollision	source/KD_Tree.c	/^void searchCollision(kdtree root, Particle p, int level){$/;"	f
swap	source/KD_Helping_func.c	/^void swap(Particle *a, Particle *b) {$/;"	f
sys	include/kd_collisionSystem.h	/^    	particleSystem* sys;$/;"	m	struct:kd_CollisionSystem
timeToHit	source/particle.c	/^double timeToHit(Particle* this, Particle* that){$/;"	f
timeToHitHorizontalWall	source/particle.c	/^double timeToHitHorizontalWall(Particle* this){$/;"	f
timeToHitVerticalWall	source/particle.c	/^double timeToHitVerticalWall(Particle* this){$/;"	f
update	source/main.c	/^void update(int value) {$/;"	f
updateKDTreePositions	source/test.c	/^void updateKDTreePositions(KDTreeNode* root, Point* newPoints, int numPoints) {$/;"	f
vx	include/particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle
vy	include/particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle
width	source/main.c	/^int width = 1000, height = 1000;$/;"	v
x	include/particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle
x	source/test.c	/^    double x;$/;"	m	struct:Point	file:
y	include/particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle
y	source/test.c	/^    double y;$/;"	m	struct:Point	file:
