!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/anvay/COEP/DSA-II_project/N-Particle-Simulation/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
CC	Makefile	/^CC = gcc $(IFLAGS) $(CFLAGS)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -g3$/;"	m
Color	particle.h	/^} Color;$/;"	t	typeref:struct:Colour
Colour	particle.h	/^typedef struct Colour{$/;"	s
Event	event.h	/^typedef struct Event{$/;"	s
Event	event.h	/^}Event;$/;"	t	typeref:struct:Event
GFLAGS	Makefile	/^GFLAGS = -lglut -lGLU -lGL$/;"	m
IFLAGS	Makefile	/^IFLAGS = -I$/;"	m
MAX_PARTICLES	quadtree.h	/^#define MAX_PARTICLES /;"	d
MFLAGS	Makefile	/^MFLAGS = -lm$/;"	m
MIN_PQ_H_	minPQ.h	/^#define MIN_PQ_H_$/;"	d
N-Particle-Simulation	README.md	/^# N-Particle-Simulation$/;"	c
OBJECT	Makefile	/^OBJECT = $(subst .c,.o,$(SOURCE))$/;"	m
PARTICLE_H_	particle.h	/^#define PARTICLE_H_$/;"	d
PQ_COL_SYS	pq_collisionSystem.h	/^#define PQ_COL_SYS$/;"	d
PQ_PARTICLE	main.c	/^#define PQ_PARTICLE /;"	d	file:
Particle	particle.h	/^typedef struct Particle{$/;"	s
Particle	particle.h	/^} Particle;$/;"	t	typeref:struct:Particle
QUADTREE_H_	quadtree.h	/^#define QUADTREE_H_$/;"	d
RANDOM_PARTICLE_GEN_	randomParticleGenerator.h	/^#define RANDOM_PARTICLE_GEN_$/;"	d
SIM	Makefile	/^SIM  = sim$/;"	m
SOURCE	Makefile	/^SOURCE = $(wildcard *.c)$/;"	m
This is our DSA-2 2nd year project	README.md	/^## This is our DSA-2 2nd year project$/;"	s	chapter:N-Particle-Simulation
arr	minPQ.h	/^	int* arr;$/;"	m	struct:minPQ	typeref:typename:int *
b	particle.h	/^	float r,g,b;$/;"	m	struct:Colour	typeref:typename:float
capacity	minPQ.h	/^	int capacity;$/;"	m	struct:minPQ	typeref:typename:int
checkOverlap	randomParticleGenerator.c	/^int checkOverlap(Particle* particles, int numParticles, int currentIndex, int arrayPos) {$/;"	f	typeref:typename:int
children	quadtree.h	/^    struct quadtree_node* children[4];$/;"	m	struct:quadtree_node	typeref:struct:quadtree_node * [4]
clamp	quadtree.h	/^double clamp(double val, double minval, double maxval){$/;"	f	typeref:typename:double
clean	Makefile	/^clean:$/;"	t
collisions	particle.h	/^	int collisions;$/;"	m	struct:Particle	typeref:typename:int
color	particle.h	/^	Color color;$/;"	m	struct:Particle	typeref:typename:Color
compare	event.c	/^int compare(Event* event1, Event* event2){$/;"	f	typeref:typename:int
countA	event.h	/^	int countA, countB; \/\/collision count of particles at the time of event creation, will be use/;"	m	struct:Event	typeref:typename:int
countB	event.h	/^	int countA, countB; \/\/collision count of particles at the time of event creation, will be use/;"	m	struct:Event	typeref:typename:int
createRandomSystem	randomParticleGenerator.c	/^void createRandomSystem(particleSystem** system, int particleCount){$/;"	f	typeref:typename:void
createquadtree_node	quadtree.h	/^quadtree_node* createquadtree_node(double x, double y, double width, double height) {$/;"	f	typeref:typename:quadtree_node *
distance	randomParticleGenerator.c	/^double distance(double x1, double y1, double x2, double y2) {$/;"	f	typeref:typename:double
divideAndAssignParticles	randomParticleGenerator.c	/^void divideAndAssignParticles(int particleCount, double left, double right, double bottom, doubl/;"	f	typeref:typename:void
drawCircle	main.c	/^void drawCircle(float r, float x, float y){$/;"	f	typeref:typename:void
drawScene	main.c	/^void drawScene() {$/;"	f	typeref:typename:void
g	particle.h	/^	float r,g,b;$/;"	m	struct:Colour	typeref:typename:float
getRandomDouble	randomParticleGenerator.c	/^double getRandomDouble(double min, double max) {$/;"	f	typeref:typename:double
height	main.c	/^int width = 1000, height = 1000;$/;"	v	typeref:typename:int
height	quadtree.h	/^    double height;$/;"	m	struct:quadtree_node	typeref:typename:double
insertParticle	quadtree.h	/^void insertParticle(quadtree_node* node, Particle* particle) {$/;"	f	typeref:typename:void
isCuttingRegion	quadtree.h	/^bool isCuttingRegion(double Cx, double Cy, double Rx, double Ry, double radius, double width, do/;"	f	typeref:typename:bool
isLeafNode	quadtree.h	/^bool isLeafNode(quadtree_node* node) {$/;"	f	typeref:typename:bool
isValid	event.c	/^int isValid(Event* event){$/;"	f	typeref:typename:int
keyboardFunc	main.c	/^void keyboardFunc(unsigned char key, int x, int y) {$/;"	f	typeref:typename:void
main	main.c	/^int main(int argc, char** argv) {	$/;"	f	typeref:typename:int
mass	particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle	typeref:typename:double
minPQ	minPQ.h	/^typedef struct minPQ{$/;"	s
minPQ	minPQ.h	/^}minPQ;$/;"	t	typeref:struct:minPQ
move	particle.c	/^void move(Particle* p, double dt){$/;"	f	typeref:typename:void
newEvent	event.c	/^Event* newEvent(double time, char type, Particle* particle1, Particle* particle2){$/;"	f	typeref:typename:Event *
newParticle	particle.c	/^Particle* newParticle(double x, double y, double vx, double vy, double radius, double mass, Colo/;"	f	typeref:typename:Particle *
particle1	event.h	/^	Particle *particle1, *particle2; \/\/pointers to particles involved in the event$/;"	m	struct:Event	typeref:typename:Particle *
particle2	event.h	/^	Particle *particle1, *particle2; \/\/pointers to particles involved in the event$/;"	m	struct:Event	typeref:typename:Particle *
particleArray	randomParticleGenerator.h	/^	Particle* particleArray;$/;"	m	struct:particleSystem	typeref:typename:Particle *
particleCount	randomParticleGenerator.h	/^	int particleCount;$/;"	m	struct:particleSystem	typeref:typename:int
particleSystem	randomParticleGenerator.h	/^typedef struct particleSystem{$/;"	s
particleSystem	randomParticleGenerator.h	/^}particleSystem;$/;"	t	typeref:struct:particleSystem
particle_count	quadtree.h	/^    int particle_count;$/;"	m	struct:quadtree_node	typeref:typename:int
particles	quadtree.h	/^    Particle particles[MAX_PARTICLES];$/;"	m	struct:quadtree_node	typeref:typename:Particle[]
pq	pq_collisionSystem.h	/^	minPQ* pq;$/;"	m	struct:pq_CollisionSystem	typeref:typename:minPQ *
pq_CollisionSystem	pq_collisionSystem.h	/^typedef struct pq_CollisionSystem{$/;"	s
pq_CollisionSystem	pq_collisionSystem.h	/^}pq_CollisionSystem;$/;"	t	typeref:struct:pq_CollisionSystem
pq_sys	main.c	/^pq_CollisionSystem pq_sys;$/;"	v	typeref:typename:pq_CollisionSystem
quadtree_node	quadtree.h	/^typedef struct quadtree_node{$/;"	s
quadtree_node	quadtree.h	/^}quadtree_node;$/;"	t	typeref:struct:quadtree_node
r	particle.h	/^	float r,g,b;$/;"	m	struct:Colour	typeref:typename:float
radius	particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle	typeref:typename:double
run	Makefile	/^run: $(OBJECT)$/;"	t
subdivideNode	quadtree.h	/^void subdivideNode(quadtree_node* node) {$/;"	f	typeref:typename:void
sys	pq_collisionSystem.h	/^	particleSystem* sys;$/;"	m	struct:pq_CollisionSystem	typeref:typename:particleSystem *
t	pq_collisionSystem.h	/^	double t;$/;"	m	struct:pq_CollisionSystem	typeref:typename:double
time	event.h	/^	double time; \/\/time for event to occur$/;"	m	struct:Event	typeref:typename:double
type	event.h	/^	char type; \/\/type of event i.e. particle-particle ,particle-wall etc.$/;"	m	struct:Event	typeref:typename:char
update	main.c	/^void update(int value) {$/;"	f	typeref:typename:void
vx	particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle	typeref:typename:double
vy	particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle	typeref:typename:double
width	main.c	/^int width = 1000, height = 1000;$/;"	v	typeref:typename:int
width	quadtree.h	/^    double width;$/;"	m	struct:quadtree_node	typeref:typename:double
x	particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle	typeref:typename:double
x	quadtree.h	/^    double x;$/;"	m	struct:quadtree_node	typeref:typename:double
y	particle.h	/^	double x,y,vx,vy,radius,mass;$/;"	m	struct:Particle	typeref:typename:double
y	quadtree.h	/^    double y;$/;"	m	struct:quadtree_node	typeref:typename:double
